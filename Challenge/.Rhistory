version
..
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print (x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print (student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample (33,3)=
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
# Assign names to a vector
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
# Access a single member of precipitation by its name
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
# Summary of data
# Display summary data of precipitation
summary(precipitation)
# Store the results in a vector.
precipitation_summary <- summary(precipitation)
# Access features of a summary
precipitation_summary["Min."]
precipitation_summary["Mean"]
# Use double brackets to access only the value
precipitation_summary[["Max."]]
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
# Standard deviation
# Display the standard deviation
sd(precipitation)
# Round SD to two digits
stdev <- sd(precipitation)
round(stdev, 2)
# Standard deviation and round using the pipe operator
precipitation %>% sd()
3.141592653 %>% round(2)
# Do it all in 1 line using chained pipe operators
precipitation %>% sd() %>% round(2)
# A few more methods
# Determine the length of a vector
length(precipitation)
# Display the sum of a vector
yearly_precipitation <- sum(precipitation)
yearly_precipitation
# The same operations, this time using pipes
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
nrow(diamonds)
head(diamonds, 10)
unique_cuts <- unique(diamonds[["cut"]])
unique_cuts
unique_cuts2 <- unique(diamonds$cut)
unique_cuts2
### Note the difference in output here
unique_cuts3 <- unique(diamonds["cut"])
unique_cuts3
tail(diamonds, 10)
slice(diamonds, 1:7)
slice(diamonds, 3)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
filter(diamonds, cut=='Ideal')
filter(diamonds, (cut=='Ideal' & price > 500))
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price), median(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
piped_summary <- group_by(diamonds, cut, color) %>% summarize(avg.price = mean(price), median.price = median(price))
piped_summary
count(diamonds, cut)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
students <-read_csv("C:\Users\angel\AppData\Local\Temp\Temp1_UofA-VIRT-DATA-PT-05-2022-U-B-main (8).zip\UofA-VIRT-DATA-PT-05-2022-U-B-main\Module 15 - R\15_1_Activities\06_Evr_Tibble\Resources\students.csv")
students <-read_csv("C:\Users\angel\AppData\Local\Temp\Temp1_UofA-VIRT-DATA-PT-05-2022-U-B-main (8).zip\UofA-VIRT-DATA-PT-05-2022-U-B-main\Module 15 - R\15_1_Activities\06_Evr_Tibble\Resources\students.csv")
students <-read_csv("\Resources\students.csv")
students <-read_csv("\resources\students.csv")
students <-read_csv("\resources\students.csv")
students <-read_csv("..\resources\students.csv")
students <-read_csv("C:\\Users\\angel\\AppData\\Local\\Temp\\Temp1_UofA-VIRT-DATA-PT-05-2022-U-B-main (8).zip\\UofA-VIRT-DATA-PT-05-2022-U-B-main\\Module 15 - R\\15_1_Activities\\06_Evr_Tibble\\Resources\\students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
# Use length() to identify the number of schools
length(unique(students$school_name))
# nrow() returns the number of rows
student_count <- nrow(students)
paste("There are a total of", student_count, "students.")
table(mpg$class,mpg$year) #generate contingency table
library(tidyverse)
library(jsonlite)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
setwd("~/")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/")
setwd("C:/Users/angel/OneDrive/Desktop/Class_Folder/Module_15/R_Analysis/Challenge")
setwd("C:/Users/angel/OneDrive/Desktop/Class_Folder/Module_15/R_Analysis/Challenge")
#Deliverable 1
#import library
library(dplyr)
#import csv file
MechaCar_table <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
#create linear model
linear_model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=MechaCar_mpg)
#import library
library(dplyr)
#import csv file
MechaCar_table <- read.csv(file='MechaCar_mpg.csv', check.names=F, stringsAsFactors = F)
#create linear model
linear_model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=MechaCar)
View(MechaCar_table)
head(MechaCar_mpg)
head(MechaCar_table)
#create linear model
linear_model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=MechaCar_table)
#summarize linear model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table))
